import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.gradlex.extra-java-module-info' version '1.+'
}

apply from: 'properties.gradle'

version = '0.12.0-beta'

allprojects {
    group = 'org.citydb'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.gradlex.extra-java-module-info'
    apply plugin: 'idea'

    version = parent.version

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        compileJava {
            options.javaModuleVersion = provider { project.version }
            options.encoding = 'UTF-8'
        }
        withJavadocJar()
        withSourcesJar()
    }

    repositories {
        maven {
            url = 'https://repo.osgeo.org/repository/release/'
        }
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            url = 'https://3dcitydb.org/maven'
        }
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    test {
        useJUnitPlatform()
    }

    extraJavaModuleInfo {
        failOnMissingModuleInfo.set(false)
        module('tomcat-jdbc-11.0.3.jar', 'org.apache.tomcat.jdbc', '11.0.3') {
            requires('java.sql')
            requires('java.management')
            requires('org.apache.tomcat.juli')
            exports('org.apache.tomcat.jdbc.pool')
        }
    }

    idea {
        module {
            outputDir = file('out/production/classes')
        }
    }

    tasks.register('processLicense', Copy) {
        from("$rootDir/resources/license/LICENSE.txt") {
            filteringCharset = 'UTF-8'
            filter(ReplaceTokens, tokens: [
                    name: appName
            ])
        }
        into "$projectDir/build/tmp/license"
    }

    javadoc {
        options {
            title = "$project.name $project.version"
            header = title
            overview = "$projectDir/build/tmp/javadoc/overview.html"
            bottom """
                <a href="${appIssueTrackerUrl}">Report a bug or suggest an enhancement</a><br>
                ${project.name} is open source and licensed under the <a target="_blank" href="https://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>.<br>
                Official website and more information at: <a target="_blank" href="$appWebsiteUrl">$appWebsiteUrl</a><br>
                Copyright &copy; $appCopyrightYear<br>
                $vendorName, $vendorCountry<br>
                <a target="_blank" href="$vendorWebsiteUrl">$vendorWebsiteUrl</a>
                """.replaceAll("[\r|\n]+", "")
            addStringOption('doctitle', project.name + ' - ' + project.version)
            addStringOption('Xdoclint:none', '-quiet')
        }

        doFirst {
            copy {
                from("$rootDir/resources/javadoc/overview.html") {
                    filteringCharset = 'UTF-8'
                    filter(ReplaceTokens, tokens: [
                            name: name,
                            version: version,
                            appName: appName,
                    ])
                }
                into "$projectDir/build/tmp/javadoc"
            }
        }
    }

    jar {
        manifest {
            attributes('Implementation-Title': appName,
                    'Implementation-Version': project.version,
                    'Implementation-Vendor': vendorName
            )
        }
        into('META-INF') {
            from "$rootDir/resources/license/APACHE-2.0.txt"
            from processLicense
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = project.name
                    url = vendorWebsiteUrl
                    scm {
                        url = appGitHubUrl
                        connection = 'scm:git:' + appGitConnection
                    }
                }
            }
        }
        repositories {
            maven {
                url = project.hasProperty('gitLab_maven_url') ?
                        project.property('gitLab_maven_url') :
                        System.getenv('GITLAB_MAVEN_URL')
                name = 'gitlab-maven'
                credentials(HttpHeaderCredentials) {
                    name = 'Private-Token'
                    value = project.hasProperty('gitLab_private_token') ?
                            project.property('gitLab_private_token') :
                            System.getenv('GITLAB_PRIVATE_TOKEN')
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
    }
}
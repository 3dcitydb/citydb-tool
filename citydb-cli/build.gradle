import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'application'
}

dependencies {
    api project(':citydb-database')
    api project(':citydb-io')
    api project(':citydb-operation')
    api project(':citydb-plugin')
    api project(':citydb-query')
    api project(':citydb-util')
    api 'info.picocli:picocli:4.7.6'
    implementation project(':citydb-config')
    implementation project(':citydb-database-postgres')
    implementation project(':citydb-io-citygml')
    implementation project(':citydb-logging')
}

processResources {
    outputs.upToDateWhen { false }
    filteringCharset = 'ISO-8859-1'
    filesMatching('**/application.properties') {
        filter(ReplaceTokens, tokens: [
                name: appName,
                version: version,
                copyrightYear: appCopyrightYear,
                vendor: vendorName
        ])
    }
}

application {
    mainModule = 'org.citydb.cli'
    mainClass = 'org.citydb.cli.Launcher'
    applicationName = appCliCommand
    executableDir = ''

    startScripts {
        doLast {
            def windows = getWindowsScript()
            def unix = getUnixScript()
            windows.text = windows.text.replaceFirst('set APP_HOME=.*', '$0\r\nset WORKING_DIR=%CD%')
            unix.text = unix.text.replaceFirst('\nMODULE_PATH=.*',
                    '$0\n\nexport APP_HOME\nexport WORKING_DIR=\\$(pwd -P)')
        }
    }
}

tasks.register('buildCityDB', GradleBuild) {
    dependsOn(':updateSubmodules')
    tasks = ['clean', 'installDist']
    dir = "$rootDir/resources/3dcitydb"
    outputs.dir "$dir/build/install/3dcitydb"
    outputs.upToDateWhen { false }
}

distributions {
    main {
        distributionBaseName = appName
        contents {
            into('license') {
                from "$rootDir/resources/license/APACHE-2.0.txt"
                from processLicense
            }
            into('3dcitydb') {
                from buildCityDB
            }
            into('samples') {
                from "$rootDir/resources/samples"
            }
            from("$projectDir/build/tmp/dir") {
                mkdir "$projectDir/build/tmp/dir/plugins"
            }
        }
    }
}

tasks.register('buildBundle', Zip) {
    group = 'distribution'
    dependsOn installDist
    from "$projectDir/build/install/$appName"
    destinationDirectory = distZip.destinationDirectory.get()
    archiveFileName = appName + '-' + project.version + '.zip'
}
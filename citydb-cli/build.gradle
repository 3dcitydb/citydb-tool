import org.apache.tools.ant.filters.ReplaceTokens

import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'application'
}

configurations {
    citydb
}

def log4j_version = '2.25.1'

dependencies {
    api project(':citydb-database')
    api project(':citydb-io')
    api project(':citydb-operation')
    api project(':citydb-plugin')
    api project(':citydb-query')
    api project(':citydb-util')
    api 'info.picocli:picocli:4.7.7'
    implementation project(':citydb-config')
    implementation project(':citydb-database-postgres')
    implementation project(':citydb-io-citygml')
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-jul:$log4j_version"
    citydb 'org.citydb:3dcitydb:5.1.0-rc.2'
}

processResources {
    outputs.upToDateWhen { false }
    filteringCharset = 'ISO-8859-1'
    filesMatching('**/application.properties') {
        filter(ReplaceTokens, tokens: [
                name: appName,
                version: version,
                copyrightYear: appCopyrightYear,
                vendor: vendorName
        ])
    }
}

application {
    mainModule = 'org.citydb.cli'
    mainClass = 'org.citydb.cli.Launcher'
    applicationName = appCliCommand
    executableDir = ''

    startScripts {
        doLast {
            def windows = getWindowsScript()
            def unix = getUnixScript()
            windows.text = windows.text.replaceFirst('set APP_HOME=.*', '$0\r\nset WORKING_DIR=%CD%')
            unix.text = unix.text.replaceFirst('\nMODULE_PATH=.*',
                    '$0\n\nexport APP_HOME\nexport WORKING_DIR=\\$(pwd -P)')
        }
    }
}

distributions {
    def version = parseVersion("$project.version")

    main {
        distributionBaseName = appName
        contents {
            into('license') {
                from "$rootDir/resources/license/APACHE-2.0.txt"
                from processLicense
            }
            into('3dcitydb') {
                from zipTree(configurations.citydb.singleFile)
            }
            into('json-schema') {
                from "$rootDir/resources/json-schema"
                filesMatching('**/*.json') {
                    filter(ReplaceTokens, tokens: [
                            major: version["major"],
                            minor: version["minor"]
                    ])
                }
            }
            into('samples') {
                from "$rootDir/resources/samples"
            }
            from("$projectDir/build/tmp/dir") {
                mkdir "$projectDir/build/tmp/dir/plugins"
            }
        }
    }

    docker {
        distributionBaseName = "$appName-docker"
        contents {
            with distributions.main.contents
            exclude('*.bat')
        }
    }
}

static def parseVersion(String versionString) {
    def version = [:]
    Matcher matcher = Pattern.compile("^(\\d+)\\.(\\d+)\\.(\\d+).*?").matcher(versionString)
    if (matcher.matches()) {
        version["major"] = matcher.group(1)
        version["minor"] = matcher.group(2)
        version["patch"] = matcher.group(3)
        version["version"] = versionString
    } else {
        throw new GradleException("Failed to parse the version '$versionString'. Use SemVer notation.")
    }
    version
}